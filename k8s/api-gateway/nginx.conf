worker_processes auto;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=one:10m rate=10r/s;

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;

    # Upstream services
    upstream auth_service {
        server auth-service:3001;
    }

    upstream restaurant_service {
        server restaurant-service:3000;
    }

    upstream order_service {
        server order-service:3000;
    }

    server {
        listen 80;
        server_name _;

        # Health check endpoint
        location /health {
            access_log off;
            return 200 'healthy\n';
        }

        # Auth service routes
        location /auth/ {
            # Remove /auth/ prefix when proxying to auth service
            rewrite ^/auth/(.*) /$1 break;
            proxy_pass http://auth_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Increase timeouts for auth service
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }

        # Restaurant service routes
        location /restaurants/ {
            auth_request /auth/verify;
            proxy_pass http://restaurant_service/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Authorization $http_authorization;
        }

        # Order service routes
        location /orders/ {
            auth_request /auth/verify;
            proxy_pass http://order_service/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Authorization $http_authorization;
        }

        # Internal auth verification endpoint
        location = /auth/verify {
            internal;
            rewrite ^/auth/(.*) /$1 break;
            proxy_pass http://auth_service;
            proxy_pass_request_body off;
            proxy_set_header Content-Length "";
            proxy_set_header X-Original-URI $request_uri;
            proxy_set_header Authorization $http_authorization;
        }

        # Default error response
        error_page 404 /404.html;
        location = /404.html {
            return 404 '{"error":"Not Found","message":"The requested resource was not found"}';
        }

        error_page 504 /504.html;
        location = /504.html {
            return 504 '{"error":"Gateway Timeout","message":"The upstream service is not responding"}';
        }
    }
} 